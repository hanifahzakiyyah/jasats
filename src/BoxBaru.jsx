/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, useScroll, ScrollControls, Scroll } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

export default function BoxBaru(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./jasa.glb')
  const { actions } = useAnimations(animations, group)

//   console.log(actions)
  // size solving
  const [size, setsize] = useState(7)

  useEffect(()=>{
    const elemen = document.getElementById("root")
    if (elemen?.classList.contains("page-index")){
      setsize(5)
    } else{
      setsize(4)
    }
  })


  // Responsif handling for resizing
    const [lookAtY, setLookAtY] = useState(0.5); 
    const [lookAtZ, setLookAtZ] = useState(0);

    useEffect(() => {
        const handleResize = () => {
        if (window.innerWidth <= 768) {
            setLookAtY(-1.5); // For mobile screen
            setLookAtZ(0); 
        } else {
            setLookAtY(0.5); // For larger screens
        }
        };

        handleResize(); 
        window.addEventListener('resize', handleResize); 
        return () => window.removeEventListener('resize', handleResize); 
    }, []);


    useFrame((state) => {
        state.camera.lookAt(0, lookAtY, lookAtZ ); 
        
    });


    // Scroll handling
    const [scrollPercent, setScrollPercent] = useState(0)
    const [opacityVal, setOpacityVal] = useState(1) 

    useEffect(() => {
    const handleScroll = () => {
        const scrollY = window.scrollY
        const scrollHeight = document.body.scrollHeight - window.innerHeight
        const percent = (scrollY / scrollHeight) * 100
        setScrollPercent(percent)
    }

    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
    
    }, [])

    useEffect(() => {
        // Akses animasi EmptyAction
        const action = actions.ATAS
        const action1 = actions.BAWAH
        const action2 = actions.MUTER
        
        // console.log(action1.getClip().tracks)
    
        if (action) {
          // Durasi animasi (dalam detik), disesuaikan dengan GLTF
          const animationDuration = action.getClip().duration
          
          // Memetakan scrollPercent (0-35%) ke durasi animasi (0 - animationDuration)
          const time = Math.min((scrollPercent / 35) * animationDuration, animationDuration)
    
          // Set waktu animasi
          action.paused = true 
          action.time = time 
          action.play()
          action1.paused = true 
          action1.time = time 
          action1.play() 
          action2.paused = true 
          action2.time = time 
          action2.play() 
        }









        
    
    
        //opacity
        if (scrollPercent > 30 && scrollPercent <= 60) {
          const normalizedPercent = (scrollPercent - 30) / (60 - 30) // 40%-70% -> 0-1
          setOpacityVal(1 - normalizedPercent) // Opacity dari 1 ke 0
        } else if (scrollPercent <= 30) {
          setOpacityVal(1) // Reset ke 1 sebelum rentang
        } else if (scrollPercent > 50) {
          setOpacityVal(0) // Tetapkan ke 0 setelah rentang
        }
      }, [scrollPercent, actions]) 
      useEffect(() => {
        if (materials['Gold Glitter']) {
          materials['Gold Glitter'].transparent = true;
          materials['Gold Glitter'].opacity = opacityVal;
        }
      
        if (materials['Gold Glitter']) {
          materials['Gold Glitter'].transparent = true;
          materials['Gold Glitter'].opacity = opacityVal;
        }
      }, [opacityVal, materials]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Empty" scale={size}>
          <mesh
            name="bot"
            castShadow
            receiveShadow
            geometry={nodes.bot.geometry}
            material={materials['Gold Glitter']}
            position={[0, 0.217, -0.471]}
            rotation={[-1.177, 0, 0]}
            scale={0.141}
          />
          <mesh
            name="top"
            castShadow
            receiveShadow
            geometry={nodes.top.geometry}
            material={materials['Gold Glitter']}
            position={[0, 0.216, -0.467]}
            rotation={[-1.177, 0, 0]}
            scale={0.141}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./jasa.glb')